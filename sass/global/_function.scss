/* 数値計算関連の関数を使うために必要 (math.divなど)*/
@use "sass:math";
@use 'setting' as *;

/*****************************************
 * 数値から単位を取り除く
 * 参考
 * https://css-tricks.com/snippets/sass/
******************************************/
@function strip-unit($number) {
  @if type-of($number)=="number" and not unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }

  @return $number;
}

/*****************************************
 * px→remの計算
 * 参考
 * https://webdou.net/sass-rem/
 * Sassではmath.div関数の使用が推奨のため、スラッシュ(/)演算子から変更
******************************************/
@function rem($pixels) {
  @return math.div($pixels , strip-unit($base-font-size)) * 1rem;
}

/*****************************************
 * vwの計算
 * 参考
 * https://webdou.net/sass-vw/
 * Sassではmath.div関数の使用が推奨のため、スラッシュ(/)演算子から変更
******************************************/
@function vw($window_width, $size) {
  @return math.div($size, $window_width) * 100vw;
}

/*****************************************
 * clampの記述
 * 使用例
    .example {
      font-size: rclamp(24, 64, 375, 1200);
    }
******************************************/


@function rclamp($min, $max, $minViewport, $maxViewport) {
// $vwScale: ($max - $min) / ($maxViewport - $minViewport); // vw単位でのスケールを計算
$vwScale: math.div($max - $min, $maxViewport - $minViewport);
$baseOffset: $min - $minViewport * $vwScale; // 基準となる最小値からのオフセットを計算
// $minRem: $min / 16; // 最小値をremに変換
// $maxRem: $max / 16; // 最大値をremに変換
$minRem: math.div($min, 16);
$maxRem: math.div($max, 16);
// $baseOffsetRem: $baseOffset / 16; // オフセットをremに変換
$baseOffsetRem: math.div($baseOffset, 16);
$vwScaleRem: $vwScale * 100; // vwスケールを調整

@return clamp(#{$minRem}rem, #{$baseOffsetRem}rem + #{$vwScaleRem}vw, #{$maxRem}rem);
}